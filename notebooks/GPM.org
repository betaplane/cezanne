#+begin_src ipython :results silent :session :exports none
  import pandas as pd
  import xarray as xr
  import matplotlib.pyplot as plt
  from matplotlib import gridspec
  from cartopy import crs
  import helpers as hh
  import plots as cplots
  import geo

  R = hh.stationize(pd.read_hdf('/home/arno/Documents/data/CEAZAMet/station_data.h5', 'pp_mm'))
  wr = xr.open_mfdataset('/home/arno/Documents/data/WRF/3d/RAINNC_?_diff.nc', concat_dim='start')
  coq = cplots.Coquimbo()
#+end_src

#+begin_src ipython :results silent :session :exports none
  with xr.open_dataset('/home/arno/Documents/data/WRF/3d/geo_em.d03.nc') as ds:
      sta = geo.stations_in_domain(ds, hh.sta)
      idx = R.columns.intersection(sta.index)
      sta = sta.loc[idx]
      _, i, j = geo.cells(ds, *sta[['lon', 'lat']].astype(float).as_matrix().T)
      R = R[idx]
#+end_src

#+begin_src ipython :results silent :session :exports none
  ri = wr['RAINNC'].isel(Time=slice(24, 48)).isel_points(south_north=i, west_east=j).load()
  x = ri.stack(time=('start', 'Time')).sortby('XTIME')
  rr = pd.DataFrame(x.transpose('time', 'points').values, index=x.XTIME, columns=sta.index)
#+end_src

#+begin_src ipython :results silent :session :exports none
  # I shift only by 3 hours s.t. the resulting timestamp refers to the end of the hour, not the beginning
  d0 = pd.read_csv('/home/arno/Downloads/IMERG_V05_b0.csv', index_col='date', parse_dates=True).drop(['system:index', '.geo'], 1).resample('H').mean().shift(-3, 'H')
  d1 = pd.read_csv('/home/arno/Downloads/IMERG_V05_b10000.csv', index_col='date', parse_dates=True).drop(['system:index', '.geo'], 1).resample('H').mean().shift(-3, 'H')
  d2 = pd.read_csv('/home/arno/Downloads/IMERG_V05_b50000.csv', index_col='date', parse_dates=True).drop(['system:index', '.geo'], 1).resample('H').mean().shift(-3, 'H')
  hq = pd.read_csv('/home/arno/Downloads/IMERG_V05_HQ.csv', index_col='date', parse_dates=True).drop(['system:index', '.geo'], 1).resample('H').mean().shift(-3, 'H')
#+end_src

#+begin_src ipython :results raw :session :exports results
  df = pd.DataFrame([(x - R).mean().mean()*24*365.25 for x in [rr.loc[d0.index], d0, d1, d2, hq]],
                    index = ['WRF', 'no buffer', '10 km', '50 km', 'HQ'], columns=['bias'])
  hh.table(df.T)
#+end_src

#+RESULTS:
|      |            WRF |     no buffer |         10 km |         50 km |           HQ |
|------+----------------+---------------+---------------+---------------+--------------|
| bias | -159.324684893 | 199.374880841 | 202.891275876 | 221.228748139 | 429.83329612 |

#+begin_src ipython :results raw :session :exports none
  r = R.loc['2017-05': '2017-06', '5']
  plt.figure()
  r.plot()
  d0['5'].resample('H').mean().plot()
  hq['5'].resample('H').mean().plot()
#+end_src

#+begin_src ipython :results raw :session :savefig "rain_error.png" :exports results
  r = rr.loc[d0.index]
  df = pd.concat([(x - R).mean() for x in [r, d0, hq]], 1) * 24 * 365.24
  df.columns = ['WRF', 'GPM', 'GPM-HQ']

  plt.figure(figsize=(13, 5))
  gs = gridspec.GridSpec(1, 4)

  plt.set_cmap('Spectral')
  pl, gls = coq.plotrow(r.mean().to_frame('obs') * 24 * 365.24, gs[0, 0], cbar='left')
  gls[0].ylabels_left = False
  plt.set_cmap('PiYG')
  coq.plotrow(df, gs[0, 1:], vmin=-800, vmax=800)
#+end_src

#+RESULTS:
[[./obipy-resources/GPM/rain_error.png]]


#+CAPTION: Rainfall observations (*left*, 'obs') and errors w.r.t. observations of different products: WRF, GPM (snapshot) and GPM HQ merged. All values are normalized to an annual time scale, but only May and June 2017 are taken into account (months during which heavy rainfall occurred).

#+begin_src ipython :results silent :session :exports none
  vv = pd.read_hdf('/home/arno/Documents/code/python/data/vv_ms.h5', 'vv_ms').loc[d0.index].xs('prom', 1, 'aggr')
  dupl = vv.columns.get_level_values('station').get_duplicates()
  codes = []
  for d in dupl:
      for elev in [2, 5, 10, 3, 30]:
          c = vv[d].xs(str(elev), 1, 'elev')
          if c.shape[1] == 0:
              continue
          else:
              c.columns = [d]
              codes.append(c)
              break
  x = hh.stationize(vv[vv.columns.get_level_values('station').symmetric_difference(dupl)])
  vv = pd.concat((x, pd.concat(codes, 1)), 1)
  # df = pd.concat(((d0 - R).dropna(0, 'all').stack(), vv.stack()), 1)
#+end_src

#+begin_src ipython :results silent :session :exports none
  from scipy import stats

  def corr(a, b, idx):
      def cor(c):
          x, y = pd.concat((a[c], b[c]), 1).dropna(0, 'any').as_matrix().T
          return stats.pearsonr(x, y) # 0 - correlation, 1 - p-value
      cols = a.columns.intersection(b.columns)
      return pd.DataFrame([cor(c) for c in cols], index=cols)

  b = (d0 - R).dropna(0, 'all')
  pears = pd.concat([corr(vv, x, 0) for x in [b, rr]], 1, keys=['GPM', 'WRF'])
#+end_src


#+begin_src ipython :results raw :session :savefig "error_wind_correlation.png" :exports results :style nandu_dark
  fig = plt.figure(figsize=(7, 12))
  fig.subplots_adjust(wspace=.05, hspace=.05)
  gs = gridspec.GridSpec(2, 1)
  plt.set_cmap('PiYG_r')
  coq.plotrow(pears.xs(0, 1, 1), gs[0], vmin=-.2, vmax=.2)
  cplots.row_label(gs[0], 'Pearson')
  plt.set_cmap('Spectral')
  coq.plotrow(pears.xs(1, 1, 1), gs[1])
  cplots.row_label(gs[1], 'P-value')
#+end_src

#+CAPTION: Pearson correlation (*top*) and P-value (*bottom*) between wind speed and precipitation error for GPM (*left*) and WRF (*right*) estimates w.r.t. observations. Error is positive for an **overestimation** of precipitation. While the GPM estimate has a few data points with `significant' corrlation, the direction of the correlation is often wrong as far as wind-induced undercatch is concerned (positive corrlation would be expected). For the WRF estimates, however, both direction of correlation and P-values seem to indicate the possibility of undercatch being involved.
#+RESULTS:
[[./obipy-resources/GPM/error_wind_correlation.png]]

