#+latex_header: \renewcommand{\familydefault}{\sfdefault}
* setup :noexport:
#+begin_src ipython :results silent :session
  import xarray as xr
  import pandas as pd
  import numpy as np
  from cartopy import crs
  import matplotlib.pyplot as plt
  import statsmodels.api as sm
#+end_src

#+begin_src ipython :results silent :session
  D = pd.HDFStore('../../data/analyses/indexes.h5')
  era = xr.open_dataset('/home/arno/Documents/data/analyses/ERA/ERA-ep-SH.nc')
  ncep = xr.open_dataset('/home/arno/Documents/data/analyses/NCEP2_T2_ppt_uv850.nc')
#+end_src

#+begin_src ipython :results silent :session
  bbox = np.array([-75, -60, -17, -35]) # minx, maxx, maxy, miny (because of the ordering in the DataArrays)
#+end_src

#+begin_src ipython :results silent :session
  from data.GSHHS import GSHHS
  plate = crs.PlateCarree()
  shapes = GSHHS.stadtlandfluss(bbox)
#+end_src

#+begin_src ipython :results silent :session
      def reg(field, series, months=(12, 1, 2)):
          ts = series.loc[np.vstack(series.index.month==m for m in months).any(0)]
          t, y = xr.align(
              xr.DataArray(series).rename({'dim_0': 'time'}),
              field.stack(space=('lon', 'lat')) * 12
          )
          x = sm.tools.add_constant(t)
          def ols(y):
              r = sm.OLS(y, x).fit()
              return r.params[1], r.pvalues[1]
          b, p = np.apply_along_axis(ols, 0, y.values)
          r = xr.DataArray(b, coords=[y.space]).unstack('space')
          return r, p.reshape(r.shape)

      def plot(R, ax, clim, pvalue=.05):
          r, p = R
          def coord(x):
              dx = np.diff(x).mean() / 2
              return np.r_[x[:1]-dx, x+dx]
          pl = ax.pcolormesh(coord(r.lon), coord(r.lat), r.T, transform=plate, vmin=-clim, vmax=clim, cmap='PiYG')
          ax.add_geometries(shapes.coast, crs=plate, edgecolor='steelblue', facecolor='none', linewidth=1)
          ax.add_geometries(shapes.border, crs=plate, edgecolor='lightslategray', facecolor='none', linewidth=1)
          ax.set_extent(bbox)
          ax.contour(r.lon, r.lat, p.T, [pvalue], transform=plate,
                     colors=['dodgerblue'], linewidths=[1])
          return pl

    def fig(key, clim=4):
        fig, axs = plt.subplots(1, 2, figsize=(12, 7), subplot_kw={'projection': plate})
        fig.subplots_adjust(wspace=.02)
        plot(R_era[key], axs[0], clim)
        axs[0].set_title('ERA')
        pl = plot(R_ncep[key], axs[1], clim)
        plots.cbar(pl, ax=axs[1], width=.02, space=.01)
        axs[1].set_title('NCEP')
        return fig, axs
#+end_src

#+begin_src ipython :results silent :session
  ppt_era = p.sel(lon=slice(*bbox[:2]+[-2, 2]), lat=slice(*bbox[2:]+[2, -2]))
  ppt_era = ppt_era.resample('MS', 'time', 'sum') * 12 # it's a total (m)
#+end_src

#+begin_src ipython :results silent :session
  ppt_ncep = ncep['prate'].sel(lon=slice(*bbox[:2]+360+[-2, 2]), lat=slice(*bbox[2:]+[2, -2]))
  ppt_ncep = ppt_ncep.resample('MS', 'time', 'mean') * 3.6 * 24 * 365 # it's a rate (mm)
#+end_src

#+begin_src ipython :results silent :session
  keys = ['soi', 'soi_stand', 'nino34', 'nino12', 'nino4', 'nino_oni', 'nino_tni']
  R_era = {k: reg(ppt_era, D[k]) for k in keys}
  R_ncep = {k: reg(ppt_ncep, D[k]) for k in keys}
#+end_src

* Intro
- Meses de verano: 12, 1, 2
- todos los indices tienen frecuencia mensual
- Datos que tengo:
|       |   desde |   hasta |
|-------+---------+---------|
| ERA   | 1979-01 | 2017-07 |
| NCEP2 | 1979-01 | 2016-12 |

Todas las figuras muestran el coeficiente de regresion entre el índice y las precipitaciones modelados por las reanalisis ERA (izquierda) y NCEP (derecha). Los contornos corresponden a un p-value de 0.05.

* SOI standardized

#+begin_src ipython :results raw :session :savefig soi_stand.png :exports results
  fig('soi_stand')
#+end_src

#+RESULTS:
[[/home/arno/Documents/code/notebooks/obipy-resources/regression_maps/soi_stand.png]]


* Niño3.4

#+begin_src ipython :results raw :session :savefig nino34.png :exports results
  fig('nino34', 8)
#+end_src

#+RESULTS:
[[/home/arno/Documents/code/notebooks/obipy-resources/regression_maps/nino34.png]]


* Niño1.2

#+begin_src ipython :results raw :session :savefig nino12.png :exports results
  fig('nino12', 6)
#+end_src

#+RESULTS:
[[/home/arno/Documents/code/notebooks/obipy-resources/regression_maps/nino12.png]]


* Niño4

#+begin_src ipython :results raw :session :savefig nino4.png :exports results
  fig('nino4', 12)
#+end_src

#+RESULTS:
[[/home/arno/Documents/code/notebooks/obipy-resources/regression_maps/nino4.png]]


* ONI
  
El ONI es el único caso con reacciónes tan diferentes entre ERA y NCEP que necesito utilizar diferentes escalas...

#+begin_src ipython :results raw :session :savefig oni.png :exports results
  key = 'nino_oni'
  fig, axs = plt.subplots(1, 2, figsize=(12, 7), subplot_kw={'projection': plate})
  fig.subplots_adjust(wspace=.02)
  pl = plot(R_era[key], axs[0], clim=.4)
  plots.cbar(pl, 'left', ax=axs[0], width=.02, space=.01)
  axs[0].set_title('ERA')
  pl = plot(R_ncep[key], axs[1], 3)
  plots.cbar(pl, ax=axs[1], width=.02, space=.01)
  axs[1].set_title('NCEP')
#+end_src

#+RESULTS:
[[/home/arno/Documents/code/notebooks/obipy-resources/regression_maps/oni.png]]


* TNI

#+begin_src ipython :results raw :session :savefig tni.png :exports results
  fig('nino_tni', 3)
#+end_src

#+RESULTS:
[[/home/arno/Documents/code/notebooks/obipy-resources/regression_maps/tni.png]]

